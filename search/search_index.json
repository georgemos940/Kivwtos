{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"Hey there! \ud83d\udc4b Wishing you a great day!  <p>   Welcome to my personal tech vault \u2014 a living hub where I keep the tools, snippets, docs, and notes I use to build, troubleshoot, and explore.   It grows as I discover new technologies, refine workflows, and push my skills. From programming and security to systems and creative work,   this space stays fast, organized, and useful. </p> <p>Last updated: 2025-09-01</p>"},{"location":"aboutme/","title":"About Me","text":"<p>Hi! I\u2019m George M. (@georgemos940). I like building at the intersection of security, web engineering, and clean, modular UI - turning ideas into fast, reliable tools and docs.</p> <p></p>"},{"location":"aboutme/#focus-areas","title":"Focus Areas","text":"<ul> <li>Security &amp; Learning: Blue-team notes, SOC references, hands-on labs (legal/educational scope).</li> <li>Web Engineering: Modern React/Next.js apps with a premium dark/glassy aesthetic.</li> <li>Tooling &amp; Docs: Developer experience, reproducible builds, and tidy documentation.</li> </ul>"},{"location":"aboutme/#tech-i-enjoy","title":"Tech I Enjoy","text":"<ul> <li>Frontend: Next.js, TypeScript, Tailwind CSS, shadcn/ui, Framer Motion  </li> <li>Ops/Build: Docker, reverse proxy + TLS automation, GitHub Actions  </li> <li>Docs: MkDocs Material, markdown-first workflows</li> </ul>"},{"location":"aboutme/#principles","title":"Principles","text":"<ul> <li>Clarity &amp; Reuse: Small, composable pieces &gt; monoliths  </li> <li>Security by Default: Sensible defaults, minimal attack surface  </li> <li>Performance &amp; UX: No flicker, no hydration errors, accessible design  </li> <li>Evidence-based Writing: When academic, I use inline references and clean bibliographies</li> </ul>"},{"location":"aboutme/#find-me","title":"Find Me","text":"<ul> <li>GitHub: @georgemos940</li> <li>Discord: https://discord.gg/pegasusac</li> </ul>"},{"location":"games/cracked-games/","title":"Cracked Games Websites","text":"<p>ATTENTION: I found these sites based on my own experience. I\u2019m not sure if they contain viruses or other malicious files, so don\u2019t just take my word for it! I\u2019ve been using them a lot in an isolated environment and haven\u2019t seen any harmful files or executables so far. Hopefully, if you follow these links, you won\u2019t encounter anything malicious either.</p>"},{"location":"games/cracked-games/#note","title":"Note","text":"<p>I will not add a lot of sites, as these are the ones I currently use and trust the most.</p>"},{"location":"games/cracked-games/#links","title":"LINKS","text":"Name Description Link online-fix.me Great online co-op games to play with friends Visit 1337x A popular torrent site, often compared to TPB Visit rutor.info A Russian alternative to 1337x Visit FitGirl Repacks Repacks of mostly single-player/offline games Visit"},{"location":"sites%20for%20oscar/fhmy/","title":"\ud83c\udf10 The Best Website Ever","text":"<p>This is honestly the best website I have found in my life so far. The team behind it is simply amazing \u2014 they keep updating everything constantly, always bringing the most solid and reliable resources online. </p>"},{"location":"sites%20for%20oscar/fhmy/#visit-it-here","title":"Visit it here","text":""},{"location":"sites%20for%20oscar/fhmy/#why-i-love-it","title":"\ud83d\udca1 Why I love it","text":"<ul> <li>Whatever you\u2019re looking for to make your life easier and cheaper, you will find it here.  </li> <li>They don\u2019t just update, they improve.  </li> <li>Every visit feels like discovering something new and valuable.  </li> </ul>"},{"location":"sites%20for%20oscar/fhmy/#show-some-love","title":"\ud83d\ude4c Show Some Love","text":"<p>If you enjoy their work as much as I do, please drop them a like and a heartfelt thank you for everything they are building!  </p> <p>\u2728 Trust me, this site is worth bookmarking.  </p>"},{"location":"soc/links/","title":"SOC Analyst Reference Links","text":"<p>Curated resources for IP, URL, domain, and phone number reputation checks, as well as threat intelligence and malware analysis.</p>"},{"location":"soc/links/#ip-checker","title":"IP Checker","text":"Name Description Link Spur.us Threat analysis of IP addresses Visit AbuseIPDB IP reputation database Visit Cisco Talos IP and domain reputation lookup Visit FeodoTracker Browse Botnet C&amp;Cs Visit IPQualityScore IP reputation scoring Visit RST Cloud IP/domain reputation lookup Visit VirusTotal IP checker with history and analysis Visit Tor Relay relay operator Visit"},{"location":"soc/links/#url-checker","title":"URL Checker","text":"Name Description Link VirusTotal Multi-engine URL scanning Visit UrlHaus URL scanning database Visit Browserling Online report url database Visit urlquery.net Website scanning and screenshot Visit Google Safe Browsing URL safety and phishing check Visit PhishTank Community-driven phishing URL database Visit Sucuri SiteCheck Website malware and security scan Visit Browserling Online browser testing for URL accessibility Visit"},{"location":"soc/links/#domain-checker","title":"Domain Checker","text":"Name Description Link Whois Lookup Domain ownership and registration details Visit AlienVault Domain Checker Website &amp; Others Visit Cisco Talos Domain and IP reputation Visit MXToolbox Domain health, DNS, and blacklist checks Visit ThreatFox You are browsing the Indicator Of Compromise (IOC) database of ThreatFox Visit SSL Blacklist Here you can browse all malicious SSL certificates Visit DomainTools Advanced domain research and monitoring Visit"},{"location":"soc/links/#mac-address-checker","title":"MAC Address Checker","text":"Name Description Link MAC Vendors MAC address vendor lookup Visit IEEE OUI Lookup Official IEEE MAC address registry Visit DNSChecker MAC Lookup MAC address search with vendor info Visit Miniweb Tool MAC Lookup Quick MAC vendor lookup Visit"},{"location":"soc/links/#website-scanner","title":"Website Scanner","text":"Name Description Link Wayback Machine View historical snapshots of websites Visit Sucuri SiteCheck Malware, blacklist, and website security scan Visit Pentest-Tools Online vulnerability scanner and security testing Visit Detectify Automated website vulnerability scanning Visit ImmuniWeb Website security, SSL/TLS, and privacy scanning Visit UpGuard Web Scan Website risk assessment and security rating Visit Observatory Mozilla Security and best practices scanner for web services Visit Qualys SSL Labs SSL/TLS configuration testing Visit Security Headers Check if the website has secure headers Visit"},{"location":"soc/links/#email-checker","title":"Email Checker","text":"Name Description Link SpamHaus Checks if an email domain or IP is listed for spamming Visit Apivoid Email reputation, blacklist and security checks Visit Talos Cisco Talos email reputation and domain intelligence Visit Mailmeteor Free tool to analyze and check email domain reputation Visit Phishtool Nice tool to upload and investigate emails Visit"},{"location":"soc/links/#number-reputation-checker","title":"Number Reputation Checker","text":"Name Description Link Truecaller Phone number reputation and lookup Visit WhoCallsMe Community-reported phone number directory Visit CallerSmart Phone number search and spam protection Visit Whitepages Reverse phone lookup and caller ID Visit SpamCalls.net Global spam call and robocall database Visit"},{"location":"soc/links/#malware-analysis","title":"Malware Analysis","text":"Name Description Link VirusTotal Multi-engine file and URL scanning Visit Malware Bazaar Database with malware investigations Visit MalPedia A wikipedia for malwares Visit Hybrid Analysis Static and dynamic malware analysis Visit Intezer Analyze Code genome malware analysis Visit Any.Run Interactive malware sandbox Visit file.net Containes all windows applications Visit Joe Malware sundbox analysis tool Visit"},{"location":"soc/links/#all-in-one-decodehashstego-tools","title":"All-in-One Decode/Hash/Stego Tools","text":"Name Description Link CyberChef Encode/Decode, crypto, parsing, forensics Visit Base64Decode.org Simple Base64 encoder/decoder Visit URLDecoder.org URL encode/decode Visit FreeFormatter HTML Entities HTML entities encode/decode Visit Online Unicode Tools UTF-8/Unicode \u2194 text conversions Visit JWT.io Decode/inspect JSON Web Tokens Visit SSL Certificate Decoder Decode X.509/CSR/PEM Visit Lapo ASN.1 Decoder Parse/inspect ASN.1 DER/BER Visit CrackStation Lookup/decrypt hashes using large DB/wordlists Visit Hashes.com Hash identifier &amp; decrypt database Visit MD5Decrypt Decrypt MD5/SHA/NTLM via database Visit TunnelsUp Hash Analyzer Identify hash type by pattern Visit HashToolKit Identify &amp; \"decrypt\" common hashes Visit Exif.tools View/extract EXIF metadata Visit Aperisolve Auto image analysis (layers/strings/exif/stego) Visit StegOnline LSB &amp; common stego operations in browser Visit Hexed.it Online hex editor/inspector Visit obf-io Online Obfuscator/Deobfuscator  (Javascript) Visit srihash.org SRI Hash Generator Visit"},{"location":"soc/templates/","title":"SOC Ticket Templates","text":"<p>This page contains standard templates used for opening SOC tickets. Replace the dummy data with actual incident details before sending to a customer.</p>"},{"location":"soc/templates/#soc-ticket-guidelines","title":"\ud83d\udcdd SOC Ticket Guidelines","text":"<pre><code>On **---\u00a0---, 2025, --:---:--PM** (UTC+03:00 \u2014 Athens) the host with:\n\n* Source IP : **---.---.---.--** \n* Destination IP: **--.---.---.---**\n* Windows Computer Name: **----------**\n* Events Count: **-------------**\n* Firewall Action:\u00a0**allowed** (**NOT** Blocked)\n\n---\n&lt;br&gt;\n&lt;br&gt;\n\n---\n\n*[ Some References ]*\n\n- [Reference1](https://example.com)\n- [Reference2](https://example.com)\n- [Reference3](https://example.com)\n- [Reference4](https://example.com)\n---\nThe activity was detected and reported by **------------------------------------** (-------------W)\n&lt;br&gt;\n*[ Payload Example ]*\n```\nblahblahblahblah  \nblahblahblahblah  \nblahblahblahblah  \n```\n</code></pre>"},{"location":"soc/templates/#incident-notification-template-example","title":"\ud83d\udcdd Incident Notification Template (Example)","text":"<pre><code>- Please investigate whether the reported activity is legitimate or not.\n- in the case the aforementioned activity is legitimate, please define the process or the business role of the user performing it as well as the business role of the corresponding host.\n- In case the aforementioned activity is not deemed legitimate, please block the source IP **-----------------**  and perform a full scan of the host with the current endpoint security solution.\n- Please notify us regarding the results of your investigation\n</code></pre>"},{"location":"tech%20briefs/CTI/yara-rules/","title":"Yara Rules","text":"<p>YARA \u2013 The Pattern Matching Swiss Knife</p> <p>Have you heard(?):</p> <ul> <li>\u201cThe pattern matching swiss knife for malware researchers (and everyone else).\u201d \u2014 VirusTotal (2020)\"</li> </ul> <p>BTW I used TryHackMe as my guide for YARA rules, so I\u2019m sharing the specific room here: TryHackMe - Yara. However, I also did my own research, as you should too.</p>"},{"location":"tech%20briefs/CTI/yara-rules/#what-is-yara-what-does-it-detect","title":"What is YARA &amp; What Does It Detect?","text":"<ul> <li>Yara  is a tool used for detecting and classifying files based on patterns</li> <li>Supports both binary and text-based patterns such as:<ul> <li>Hexadecimal sequences</li> <li>Strings (ASCII/Unicode)</li> <li>Regex expressions</li> </ul> </li> <li>Uses rules you define against files, directories, or process IDs </li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#why-strings-matters","title":"Why Strings Matters","text":"<ul> <li>Strings are simple sequences of characters used to store text in applications</li> <li> <p>Example</p> <p><pre><code>print(\"Hello World!)\n</code></pre>  The text \"Hello World!\" is stored as a string.</p> </li> <li> <p>Malware works the same way it stores information as strings, such as:</p> <ul> <li>Ransomware     <code>12t9YDPgwueZ9NyMgw519p7AA8isjr6SMw</code> Bitcoin wallet for ransom payments</li> <li>Botnet:     <code>12.34.56.8</code> IP address of the Command &amp; Control (C2) Server</li> </ul> </li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#basic-requirements","title":"Basic Requirements","text":"<ul> <li> <p>Every YARA command needs:</p> <ol> <li>The rule file you create</li> <li>The target(file, directory or PID)</li> </ol> </li> <li> <p>Every Rule must have</p> <ul> <li>A name</li> <li>A condition</li> </ul> </li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#example-first-rule","title":"Example: First Rule","text":"<ol> <li>Create a file: <pre><code>touch somefile\n</code></pre></li> <li>Create a rule file: <pre><code>touch myfirstrule.yar  \n</code></pre></li> <li>Edit <code>myfirstrule.yar</code> and add: <pre><code>rule examplerule {\n    condition: true\n}\n</code></pre></li> <li>This rule checks if the target exists because the condition is always true.</li> </ol>"},{"location":"tech%20briefs/CTI/yara-rules/#run-the-rule","title":"Run the Rule","text":"<pre><code>yara myfirstrule.yar somefile\n</code></pre> <ul> <li> <p>If somefile exists:     Output -&gt; <code>example rule somefile</code></p> </li> <li> <p>If it does not exist:     Output -&gt; <code>error scanning sometextfile: could not open file</code></p> </li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#what-are-yara-modules","title":"What Are YARA Modules?","text":"<p>YARA modules are built-in extensions that provide extra features for your rules. They allow you to inspect: - File structure &amp; metadata - Calculate entropy - Compute hashes - Analyze imports and sections (for PE, ELF, etc.)</p> <p>Think of them as power-ups for your rules.</p>"},{"location":"tech%20briefs/CTI/yara-rules/#why-use-modules","title":"Why Use Modules?","text":"<ul> <li>To detect specific file types (PE, ELF, Mach-O)</li> <li>To verify imports, sections, or architecture</li> <li>To check for packed or encrypted content</li> <li>To match hash-based IOCs</li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#common-modules-examples","title":"Common Modules &amp; Examples","text":""},{"location":"tech%20briefs/CTI/yara-rules/#1-pe-module","title":"1. PE Module","text":"<p>Analyze Windows Portable Executable files. <pre><code>import \"pe\"\n\nrule detect_pe_import {\n    condition:\n        pe.imports(\"kernel32.dll\", \"VirtualAlloc\")\n}\n</code></pre></p>"},{"location":"tech%20briefs/CTI/yara-rules/#2-elf-module","title":"2. ELF Module","text":"<p>Analyze Linux ELF binaries. <pre><code>import \"elf\"\n\nrule detect_elf_x86 {\n    condition:\n        elf.machine == elf.MACHINE_X86\n}\n</code></pre></p>"},{"location":"tech%20briefs/CTI/yara-rules/#3-math-module","title":"3. Math Module","text":"<p>Calculate entropy to detect packing/encryption. <pre><code>import \"math\"\n\nrule high_entropy {\n    condition:\n        math.entropy(0, filesize) &gt; 7.5\n}\n</code></pre></p>"},{"location":"tech%20briefs/CTI/yara-rules/#4-hash-module","title":"4. Hash Module","text":"<p>Check for known file hashes.``` <pre><code>import \"hash\"\n\nrule check_md5 {\n    condition:\n        hash.md5(0, filesize) == \"44d88612fea8a8f36de82e1278abb02f\"\n}\n</code></pre></p>"},{"location":"tech%20briefs/CTI/yara-rules/#when-do-you-need-them","title":"When Do You Need Them?","text":"<p>Use modules when: - You need metadata, structure, or calculated values.</p> <p>Not needed when: - You only match simple strings or hex patterns.</p>"},{"location":"tech%20briefs/CTI/yara-rules/#smart-move","title":"Smart Move","text":"<p>Combine strings and module checks for strong detection: <pre><code>import \"pe\"\n\nrule combined_check {\n    strings:\n        $a = \"Mimikatz\"\n    condition:\n        $a and pe.imports(\"advapi32.dll\", \"CryptAcquireContextA\")\n}\n</code></pre></p>"},{"location":"tech%20briefs/CTI/yara-rules/#automating-yara-rule-development","title":"Automating YARA Rule Development","text":"<p>Developing YARA rules from scratch can be fun for simple cases, but it often becomes time-consuming for complex patterns. That\u2019s why automation tools exist to make the process easier. Some great developers (like Florian Roth) have created tools that help us build and manage YARA rules with automation.</p> <p>In this section, we\u2019ll look at LOKI, but here\u2019s a quick reference table of popular tools:</p>"},{"location":"tech%20briefs/CTI/yara-rules/#yara-automation-tools","title":"YARA Automation Tools","text":"Tool Description Link LOKI Free open-source IOC scanner by Florian Roth. Detects based on filenames, YARA rules, hashes, and C2 checks. Works on Windows/Linux. LOKI GitHub THOR Lite Advanced multi-platform IOC + YARA scanner (Windows/Linux/macOS). Offers scan throttling to reduce CPU usage. Free version of THOR. THOR Lite Info FENRIR Bash-based IOC checker by Florian Roth. Works on any system running Bash (Linux, macOS, even Windows WSL). FENRIR GitHub YAYA \"Yet Another Yara Automaton\" by the EFF. Helps manage multiple YARA rule repositories, add custom rules, and scan files. Linux-only. YAYA GitHub"},{"location":"tech%20briefs/CTI/yara-rules/#why-use-these-tools","title":"Why Use These Tools?","text":"<ul> <li>Faster rule creation</li> <li>Automated IOC checks</li> <li>Built-in scanning logic</li> <li>Cross-platform support</li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#loki-quick-overview","title":"LOKI \u2013 Quick Overview","text":"<ul> <li>LOKI detects threats using 4 main methods:</li> <li>File Name IOC Check</li> <li>YARA Rule Check</li> <li>Hash Check</li> <li>C2 Back Connect Check</li> <li>Supports Windows and Linux</li> <li>GitHub: https://github.com/Neo23x0/Loki</li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#example-displaying-help","title":"Example: Displaying Help","text":"<pre><code>python3 loki.py -h\n</code></pre>"},{"location":"tech%20briefs/CTI/yara-rules/#thor-lite-quick-overview","title":"THOR Lite \u2013 Quick Overview","text":"<ul> <li>Multi-platform scanner for IOC + YARA</li> <li>Supports Windows, Linux, macOS</li> <li>Includes scan throttling</li> <li>Free version available: THOR Lite</li> <li>More info: THOR Lite</li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#fenrir-quick-overview","title":"FENRIR \u2013 Quick Overview","text":"<ul> <li>Bash-based IOC checker</li> <li>Lightweight and portable</li> <li>Works on any OS that supports Bash</li> <li>GitHub: FENRIR</li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#yaya-quick-overview","title":"YAYA \u2013 Quick Overview","text":"<ul> <li>Manages multiple YARA rule repositories</li> <li>Allows importing, adding, and disabling rule sets</li> <li>Linux-only</li> <li>GitHub: YAYA</li> </ul>"},{"location":"tech%20briefs/CTI/yara-rules/#using-loki","title":"Using LOKI","text":"<p>In cybersecurity operations, staying ahead of attackers often means digging into threat intelligence reports, security blogs, and research papers to learn about new tactics, techniques, and procedures. These resources usually include Indicators of Compromise (IOCs)\u2014like file hashes, IP addresses, and domain names, alongside YARA rules that help identify suspicious activity.</p> <p>Sometimes, though, you might come across an artifact or file that none of your existing security tools detect. This is where tools like LOKI become extremely useful. It allows you to: - Incorporate your own YARA rules based on threat intel - Leverage findings from incident response or forensic investigations</p> <p>The best part? LOKI already ships with a robust collection of YARA rules, so you can start scanning endpoints for malicious indicators right away.</p> <p>command to run LOKI : </p> <pre><code>python ../../tools/Loki/loki.py -p .\n</code></pre> <p>(Showcasing you my LOKI Expierence with in the tryhackme walkthrough )</p> <pre><code>cmnatic@ip-10-10-230-175:~/tools/Loki$ python loki.py -h\nusage: loki.py [-h] [-p path] [-s kilobyte] [-l log-file] [-r remote-loghost]\n               [-t remote-syslog-port] [-a alert-level] [-w warning-level]\n               [-n notice-level] [--printall] [--allreasons] [--noprocscan]\n               [--nofilescan] [--nolevcheck] [--scriptanalysis] [--rootkit]\n               [--noindicator] [--reginfs] [--dontwait] [--intense] [--csv]\n               [--onlyrelevant] [--nolog] [--update] [--debug]\n               [--maxworkingset MAXWORKINGSET] [--syslogtcp]\n               [--logfolder log-folder] [--nopesieve] [--pesieveshellc]\n               [--nolisten] [--excludeprocess EXCLUDEPROCESS]\n\nLoki - Simple IOC Scanner\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p path               Path to scan\n  -s kilobyte           Maximum file size to check in KB (default 5000 KB)\n  -l log-file           Log file\n  -r remote-loghost     Remote syslog system\n  -t remote-syslog-port\n                        Remote syslog port\n  -a alert-level        Alert score\n  -w warning-level      Warning score\n  -n notice-level       Notice score\n  --printall            Print all files that are scanned\n  --allreasons          Print all reasons that caused the score\n  --noprocscan          Skip the process scan\n  --nofilescan          Skip the file scan\n  --nolevcheck          Skip the Levenshtein distance check\n  --scriptanalysis      Activate script analysis (beta)\n  --rootkit             Skip the rootkit check\n  --noindicator         Do not show a progress indicator\n  --reginfs             Do check for Regin virtual file system\n  --dontwait            Do not wait on exit\n  --intense             Intense scan mode (also scan unknown file types and\n                        all extensions)\n  --csv                 Write CSV log format to STDOUT (machine processing)\n  --onlyrelevant        Only print warnings or alerts\n  --nolog               Don't write a local log file\n  --update              Update the signatures from the \"signature-base\" sub\n                        repository\n  --debug               Debug output\n  --maxworkingset MAXWORKINGSET\n                        Maximum working set size of processes to scan (in MB,\n                        default 100 MB)\n  --syslogtcp           Use TCP instead of UDP for syslog logging\n  --logfolder log-folder\n                        Folder to use for logging when log file is not\n                        specified\n  --nopesieve           Do not perform pe-sieve scans\n  --pesieveshellc       Perform pe-sieve shellcode scan\n  --nolisten            Dot not show listening connections\n  --excludeprocess EXCLUDEPROCESS\n                        Specify an executable name to exclude from scans, can\n                        be used multiple times\ncmnatic@ip-10-10-230-175:~/tools/Loki$ \n</code></pre> <p>First command you should run after installing LOKI is --update this is important  because it will add a signature-base directory, which Loki uses to scan for known evil. </p> <p></p> <p>There is 3 results that the LOKI can output that is malicious/suspicious or clean file</p>"},{"location":"tech%20briefs/CTI/yara-rules/#creating-yara-rules-with-yargen","title":"Creating YARA Rules with yarGen","text":"<p>yarGen is a tool designed to automatically generate YARA rules based on strings extracted from malware samples. Its core principle is to identify unique strings in malicious files while filtering out those commonly found in legitimate software, reducing the risk of false positives.</p> <p>The tool includes extensive databases of goodware strings and opcodes, which are used to exclude non-malicious patterns during rule creation. When executed, yarGen analyzes the specified sample files, extracts candidate strings, removes common or goodware-associated strings, and outputs a YARA rule that can be used for threat detection.</p> <p>This approach is particularly useful during incident response when analysts need to quickly create reliable detection signatures for newly discovered malware. The generated YARA rules can then be applied across systems to identify additional infections and prevent further compromise.</p> <p></p>"},{"location":"tech%20briefs/CTI/yara-rules/#valhalla-online-yara-feed","title":"Valhalla \u2013 Online YARA Feed","text":"<p>Valhalla Link here is an online YARA feed created and hosted by Nextron-Systems. It provides a large collection of high-quality, hand-crafted YARA rules aimed at improving detection capabilities. These rules are curated and maintained by experienced security professionals, ensuring accuracy and reducing false positives.</p> <p>Valhalla allows users to perform searches based on various parameters, including: - Keyword: Search for rules related to a specific term. - Tag: Identify rules associated with certain techniques or behaviors. - ATT&amp;CK Technique: Correlate with the MITRE ATT&amp;CK framework. - SHA256: Find rules associated with a specific file hash. - Rule Name: Look up a specific YARA rule by its name.</p> <p>Each rule entry typically includes: - Rule Name - Brief Description - Reference Link for additional information - Creation or Update Date</p> <p>Valhalla serves as an essential resource for incident response and threat hunting, allowing analysts to leverage pre-built detection signatures without manually writing complex YARA rules. By using Valhalla, security teams can quickly identify known threats, enhance detection mechanisms, and improve overall threat intelligence.</p> <p></p> <p>Btw here is the documentation of yara : Yara Documentation</p> <p>John Hammond has a great video on YARA! I recommend checking it out. Personally, I find videos more effective than just reading, I learn a lot more from them. But of course, it depends on the person.</p> <p>Video from Gerald Auger is also very good!</p>"},{"location":"tech%20briefs/cryptography/diff-hash-encod-encry/","title":"Differences Hashing/Encoding/Encryption","text":"<p>In information security, it is essential to distinguish between hashing, encoding, and encryption, as all three processes transform data but serve different purposes and possess distinct properties.</p> <ul> <li>Hashing is the process of converting data into a fixed-size value (hash value or digest) that uniquely represents the original data. Even the smallest change in the input will result in a significantly different hash value. This process is one-way, meaning it cannot be reversed to recover the original data. Hashing is primarily used for verifying data integrity and authentication. </li> </ul> <ul> <li>Encoding is the transformation of data from one format to another to ensure compatibility or enable transfer across different systems. Examples include UTF-8, UTF-16, ASCII, as well as non-language-specific encodings such as Base64 and Base32. The process is reversible and does not provide security, since anyone with the appropriate tools can decode the data. </li> </ul> <ul> <li>Encryption is the process of transforming data using a cryptographic algorithm (cipher) and a key to protect confidentiality. The process is reversible, but only if the correct key is available and the algorithm used is known.   </li> </ul>"},{"location":"tech%20briefs/cryptography/diff-hash-encod-encry/#related-video","title":"\ud83d\udcf9 Related Video","text":""},{"location":"tech%20briefs/cryptography/p-np/","title":"The P = NP Problem: A Fundamental Question in Computer Science","text":"<p>The P = NP problem is one of the most famous and important unsolved questions in computer science. It is simple to ask but extremely deep in meaning:  </p> <ul> <li>The class P contains problems that can be solved efficiently (in polynomial time) by a computer.  </li> <li>The class NP contains problems that might be very hard to solve, but if someone provides a possible solution, we can verify it efficiently.  </li> </ul> <p>The big question is: Does P = NP? In other words, can every problem whose solution can be checked quickly also be solved quickly?  </p>"},{"location":"tech%20briefs/cryptography/p-np/#why-it-matters","title":"Why It Matters","text":"<p>If P = NP, then a huge number of problems considered difficult today could be solved efficiently. This would revolutionize many areas such as:  </p> <ul> <li>Artificial Intelligence: Training models, planning, and optimization tasks could be solved much faster.  </li> <li>Logistics &amp; Optimization: Scheduling, route planning, and resource allocation could all be optimized instantly.  </li> <li>Mathematics &amp; Science: Proofs, simulations, and models could be solved in ways we cannot currently imagine.  </li> </ul> <p>But the most critical impact would be in cryptography. </p>"},{"location":"tech%20briefs/cryptography/p-np/#p-vs-np-and-cryptography","title":"P vs NP and Cryptography","text":"<p>Modern cryptography is built on the assumption that some problems are computationally hard. For example:  </p> <ul> <li>RSA encryption relies on the difficulty of factoring large numbers.  </li> <li>Elliptic curve cryptography (ECC) relies on the hardness of the discrete logarithm problem.  </li> <li>Hash functions (like SHA-256) are designed so that reversing them (finding an input that produces a given output) should be infeasible.  </li> </ul> <p>These systems are secure only if the underlying mathematical problems cannot be solved efficiently. If P = NP, then it would be possible to design algorithms that could factor large numbers, reverse hashes, or solve discrete logarithms in polynomial time.  </p> <p>This means:  </p> <ul> <li>Password hashes could be cracked almost instantly.  </li> <li>Digital signatures could be forged.  </li> <li>Secure online communication (HTTPS, banking, cryptocurrencies, blockchain systems) would collapse [1], [2].  </li> </ul> <p>In short, if P = NP, most of today\u2019s digital security would no longer exist.  </p>"},{"location":"tech%20briefs/cryptography/p-np/#if-p-np","title":"If P \u2260 NP","text":"<p>If instead P \u2260 NP, then it is confirmed that there are problems which cannot be solved efficiently. That means cryptography, hashing, and secure communications are built on strong foundations:  </p> <ul> <li>Hashes remain one-way functions, ensuring secure password storage.  </li> <li>Encryption schemes remain practically unbreakable with current computational power.  </li> <li>Blockchain technology and other cryptographic protocols can be trusted to remain secure [3].  </li> </ul> <p>This is why the P vs NP problem is not only a theoretical question but also a very practical one, affecting every aspect of digital life.  </p>"},{"location":"tech%20briefs/cryptography/p-np/#the-open-problem","title":"The Open Problem","text":"<p>Despite decades of effort, no one has been able to prove whether P equals NP or not. The problem is so central to mathematics and computer science that the Clay Mathematics Institute has named it one of the Millennium Prize Problems, offering 1 million dollars for a correct solution [4].  </p> <p>Whether the answer is \u201cyes\u201d or \u201cno,\u201d solving this problem will completely change the way we think about computing, security, and even the limits of human knowledge.  </p>"},{"location":"tech%20briefs/cryptography/p-np/#references","title":"References","text":"<p>[1] M. Sipser, Introduction to the Theory of Computation, 3rd ed., Cengage Learning, 2012. [2] J. Katz and Y. Lindell, Introduction to Modern Cryptography, 2nd ed., CRC Press, 2014. [3] C. H. Papadimitriou, Computational Complexity, Addison-Wesley, 1994. [4] Clay Mathematics Institute, \u201cThe Millennium Prize Problems,\u201d 2000.  </p>"},{"location":"tech%20briefs/network/networkminer/","title":"NetworkMiner is an open-source traffic sniffer,\u00a0PCAP\u00a0handler and protocol analyser. Developed and still maintained by Netresec.","text":"<p>NetworkMiner is a Network Forensic Analysis Tool (NFAT) designed for passive traffic analysis. It runs natively on Windows and also works on Linux, macOS, and FreeBSD. Rather than injecting packets or altering traffic, it listens or parses captures to reconstruct a clear picture of who talked to whom, over which protocols and ports, and what data changed hands. This makes it well suited for incident response scenarios where you want visibility without operational risk.</p> <p></p> <p>In practice, NetworkMiner excels at quickly mapping observed hosts and sessions. From a single capture it can summarize IP and MAC addressing, infer hostnames and likely operating systems, and highlight candidate services and open ports based on observed flows. Because it understands common protocols and reassembles streams, it can recover transferred files, certificates, and in cases where protection is weak or plaintext is used credentials and parameters. These capabilities make it an efficient triage companion: you open a PCAP and immediately get high-value clues before committing to a packet-by-packet deep dive.</p> <p>Two data sources matter most: live traffic and saved captures. Live sniffing exists and is primarily useful on Windows, but the tool\u2019s real strength is offline parsing of PCAP/PCAPNG files. In that mode you get a quick, structured overview of an incident, which helps you spot the \u201clow-hanging fruit\u201d and decide where further analysis is warranted. Logs can complement this process, but NetworkMiner\u2019s workflow is centered on passive capture analysis.</p> <p>There are two operating modes conceptually: a sniffer mode and an offline parser. The sniffer can be convenient for ad-hoc observation, yet it is not meant to replace dedicated sniffers like Wireshark or tcpdump. The offline parser is the recommended path for investigations: collect traffic via a proper capture method or SPAN/TAP, then point NetworkMiner at the file to harvest hosts, sessions, artifacts, and indicators within minutes.</p> <p>The tool\u2019s advantages are clear in the early stages of an investigation. It provides immediate situational awareness across hosts, services, and sessions; it performs OS fingerprinting using established fingerprint sets such as p0f/Satori; and it makes artifact extraction straightforward, from images and HTML to certificates and credentials. Its limitations appear when requirements shift to exhaustive filtering, protocol dissector nuance, large-scale PCAP handling, statistical exploration, or payload-level decoding, where Wireshark, Zeek, or specialized pipelines tend to outperform it. Put simply, NetworkMiner is optimized for overview and extraction, not for exhaustive manual dissection of very large captures.</p> <p></p> <p>Compared with Wireshark, the tools share the ability to sniff and read PCAPs, but they diverge in emphasis. NetworkMiner is best treated as a rapid triage and data-extraction engine that organizes evidence by host and session and exposes recovered artifacts with minimal friction. Wireshark is the instrument for deep analysis: powerful display filters, rich protocol decoders, payload and stream inspection, statistics, and advanced troubleshooting. The most effective workflows combine the two: capture traffic, open the file in NetworkMiner to identify suspicious hosts, files, credentials, or tool fingerprints such as Nmap scan patterns, and then pivot to Wireshark for the specific flows that merit close inspection.</p> <p>A practical workflow might look like this. First, capture traffic with a proper tool and source (for example, tcpdump on a monitored interface or a SPAN/TAP feed) to a PCAP file. Next, open the PCAP in NetworkMiner to enumerate hosts, sessions, and likely operating systems, and to recover files and credentials that were transmitted. As findings emerge such as an unexpected client fetching executables over HTTP, a certificate that does not match expected infrastructure, or repeated connection attempts indicative of scanning or brute force\u2014pivot those flows into Wireshark for fine-grained decoding and validation. If captures are very large, split them by time window or interface to keep triage responsive. When operating in a forensic context, record hashes of the original PCAPs and preserve chain of custody so that any recovered artifacts can be defended as evidence.</p> <p>There are free and professional editions; the free edition is sufficient for most triage and teaching scenarios, while the professional edition adds convenience and advanced features for larger or repeated workflows. Regardless of edition, the strategic value remains the same: use NetworkMiner to quickly surface what matters, then bring heavyweight analyzers to bear where depth and precision are required.</p> <p>a nice video from Hank Hackerson and tryhackme explain some things about network miner</p> <p>truth is network miner is a bit old/unfamous however understanding NetworkMiner helps you quickly extract hosts, sessions, files, and indicators from network captures, which is essential for rapid triage and incident response in any SOC environment. (my opinion....)</p>"},{"location":"tech%20briefs/network/snort/","title":"Snort: An Overview and Historical Background","text":"<p>Snort is a widely used open-source solution for network security that can function as both a Network Intrusion Detection System (NIDS) and a Network Intrusion Prevention System (NIPS). It is primarily rule-based, using signatures and policy rules to identify malicious or suspicious patterns in network traffic.</p> <p>Official description: \u201cSnort is the foremost open-source Intrusion Prevention System (IPS) in the world. Snort IPS uses a series of rules that help define malicious network activity and uses those rules to identify matching packets and generate alerts for users.\u201d</p> <p></p>"},{"location":"tech%20briefs/network/snort/#historical-background","title":"Historical Background","text":"<ul> <li>1998 - Initial release. Snort was created by Martin Roesch as a lightweight packet sniffer and intrusion detection tool. Its speed and simplicity quickly attracted users in both academia and industry.  </li> <li>2001\u20132005 - Rapid growth. A rich, community-driven rule language and ecosystem of shared signatures turned Snort into one of the first widely adopted open-source IDS platforms.  </li> <li>2013 - Cisco acquisition of Sourcefire. Roesch\u2019s company Sourcefire (the commercial steward of Snort) was acquired by Cisco. Ongoing development and threat-intelligence curation are now led by Cisco Talos in collaboration with the open-source community.  </li> <li>2019+ - Snort 3. A major architectural update introduced a more modular, performance-oriented engine with improved rule parsing, scalability, and extensibility.</li> </ul>"},{"location":"tech%20briefs/network/snort/#how-snort-works-high-level","title":"How Snort Works (High Level)","text":"<ol> <li>Packet capture: Snort inspects network traffic in real time (libpcap or equivalent).  </li> <li>Preprocessors: Optional modules normalize and prepare traffic (e.g., defragmentation, stream reassembly, protocol decoding).  </li> <li>Detection engine: Packets/streams are matched against rules that describe threats using signatures, protocol/flow context, and payload conditions.  </li> <li>Actions &amp; logging: Depending on mode and rule actions, Snort can alert, log, or drop/block traffic (inline IPS).</li> </ol>"},{"location":"tech%20briefs/network/snort/#key-capabilities","title":"Key Capabilities","text":"<ul> <li>Signature-based detection: Match known attack patterns (exploits, malware C2, scans).  </li> <li>Protocol analysis &amp; normalization: Catch evasions and malformed traffic.  </li> <li>Content and PCRE matching: Deep payload inspection with flexible conditions.  </li> <li>Multiple deployment modes: </li> <li>NIDS (passive): Monitor and alert.  </li> <li>NIPS (inline): Prevent by dropping packets.  </li> <li>Integration-friendly output: Unified2/JSON logs; works with SIEMs, dashboards, and SOC tooling.  </li> <li>Rich rule ecosystem: Community and Talos rulesets, with continuous updates.</li> </ul>"},{"location":"tech%20briefs/network/snort/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Intrusion detection &amp; prevention for enterprise and service-provider networks.  </li> <li>Threat hunting &amp; forensics via detailed logs and packet captures.  </li> <li>Compliance &amp; monitoring (e.g., detecting policy violations or suspicious lateral movement).  </li> <li>Lab/training environments to study network attacks and defenses.</li> </ul>"},{"location":"tech%20briefs/network/snort/#ids-vs-ips-overview-before-snort","title":"IDS vs IPS Overview (Before Snort)","text":"<p>Before diving into Snort and traffic analysis, it's essential to understand what an Intrusion Detection System (IDS) and an Intrusion Prevention System (IPS) are. Both can be configured within a network infrastructure, but they serve different purposes.</p>"},{"location":"tech%20briefs/network/snort/#intrusion-detection-system-ids","title":"Intrusion Detection System (IDS)","text":"<p>IDS is a passive monitoring solution designed to detect malicious activities, abnormal behavior, or policy violations. It generates alerts when suspicious events are detected, but it does not block or stop traffic.</p>"},{"location":"tech%20briefs/network/snort/#types-of-ids","title":"Types of IDS:","text":"<ul> <li> <p>Network Intrusion Detection System (NIDS):   Monitors traffic across an entire subnet. If a signature matches a known threat, an alert is triggered.</p> </li> <li> <p>Host-based Intrusion Detection System (HIDS):   Monitors traffic and events on a single host or device. Detects local suspicious activity and generates alerts.</p> </li> </ul>"},{"location":"tech%20briefs/network/snort/#intrusion-prevention-system-ips","title":"Intrusion Prevention System (IPS)","text":"<p>IPS is an active protection solution that not only detects but also prevents malicious activities. It can stop, block, or terminate the suspicious connection immediately upon detection.</p>"},{"location":"tech%20briefs/network/snort/#types-of-ips","title":"Types of IPS:","text":"<ul> <li> <p>Network Intrusion Prevention System (NIPS):   Monitors and protects the entire subnet by blocking malicious traffic.</p> </li> <li> <p>Behavior-based IPS (Network Behavior Analysis - NBA):   Detects anomalies by learning what is considered \u201cnormal\u201d traffic (baselining) and identifying deviations.  </p> <p>Note: Training is crucial to reduce false positives. A poorly trained system may produce incorrect results or miss attacks.</p> </li> <li> <p>Wireless Intrusion Prevention System (WIPS):   Focused on securing wireless networks by detecting and blocking wireless-based attacks.</p> </li> <li> <p>Host-based Intrusion Prevention System (HIPS):   Protects a single endpoint, actively terminating malicious connections.  </p> <p>HIPS works like HIDS but adds prevention capabilities instead of only generating alerts.</p> </li> </ul>"},{"location":"tech%20briefs/network/snort/#detection-prevention-techniques","title":"Detection &amp; Prevention Techniques","text":"<p>IDS and IPS solutions typically use three main approaches:</p> Technique Description Signature-Based Matches known attack patterns. Effective for known threats. Behavior-Based Detects anomalies compared to normal traffic. Useful for unknown threats. Policy-Based Compares activities against predefined policies to detect violations."},{"location":"tech%20briefs/network/snort/#summary-ids-vs-ips","title":"Summary (IDS vs IPS)","text":"<ul> <li>IDS \u2192 Detects threats, but requires user action to block them.  </li> <li>IPS \u2192 Detects and automatically blocks threats in real time.  </li> </ul>"},{"location":"tech%20briefs/network/snort/#snort-overview","title":"Snort: Overview","text":"<p>Snort is an open-source, rule-based Network Intrusion Detection and Prevention System (NIDS/NIPS) developed by Martin Roesch in 1998. It is maintained by the open-source community and the Cisco Talos team.</p> <p>Official Description: \u201cSnort can be deployed inline to stop these packets, as well. Snort has three primary uses: - As a packet sniffer like tcpdump - As a packet logger (for network debugging) - As a full-blown Network Intrusion Prevention System.\u201d  </p>"},{"location":"tech%20briefs/network/snort/#key-capabilities-of-snort","title":"Key Capabilities of Snort","text":"<ul> <li>Live traffic analysis</li> <li>Attack and probe detection</li> <li>Packet logging</li> <li>Protocol analysis</li> <li>Real-time alerting</li> <li>Support for modules &amp; plugins</li> <li>Pre-processors</li> <li>Cross-platform (Linux &amp; Windows)</li> </ul>"},{"location":"tech%20briefs/network/snort/#snort-operating-modes","title":"Snort Operating Modes","text":"<ol> <li> <p>Sniffer Mode:    Reads and displays IP packets in real-time on the console.</p> </li> <li> <p>Packet Logger Mode:    Logs all inbound and outbound IP packets for analysis.</p> </li> <li> <p>NIDS/NIPS Mode:    Detects and blocks packets classified as malicious based on user-defined rules.</p> </li> </ol>"},{"location":"tech%20briefs/network/snort/#snort-first-interaction-and-modes","title":"Snort: First Interaction and Modes","text":"<p>This guide explains how to verify Snort installation, test configurations, and run Snort in different modes: Sniffer, Logger, IDS/IPS, and PCAP. Everything is inside a single code block for easy copy-paste.</p>"},{"location":"tech%20briefs/network/snort/#0-verify-installation-config-test","title":"0) Verify Installation &amp; Config Test","text":""},{"location":"tech%20briefs/network/snort/#show-snort-version","title":"Show Snort version","text":"<pre><code>snort -V\n</code></pre>"},{"location":"tech%20briefs/network/snort/#test-the-configuration-file","title":"Test the configuration file","text":"<pre><code>sudo snort -T -c /etc/snort/snort.conf\n</code></pre>"},{"location":"tech%20briefs/network/snort/#quiet-mode-hide-banner","title":"Quiet mode (hide banner)","text":"<pre><code>snort -q\n</code></pre>"},{"location":"tech%20briefs/network/snort/#core-parameters","title":"Core Parameters","text":"Parameter Description -V Show Snort version -c Use configuration file -T Test configuration and exit -q Quiet mode: hide banner &amp; info"},{"location":"tech%20briefs/network/snort/#1-sniffer-mode-like-tcpdump","title":"1) Sniffer Mode (like tcpdump)","text":"<p>Snort can display packet info on the fly.</p>"},{"location":"tech%20briefs/network/snort/#parameters","title":"Parameters","text":"Parameter Description -v Verbose: TCP/IP headers -d Show packet data (payload) -e Show link-layer headers -X Full packet in HEX + ASCII -i  Interface to listen on (e.g., eth0)"},{"location":"tech%20briefs/network/snort/#examples","title":"Examples","text":""},{"location":"tech%20briefs/network/snort/#verbose-on-eth0","title":"Verbose on eth0","text":"<pre><code>sudo snort -v -i eth0\n</code></pre>"},{"location":"tech%20briefs/network/snort/#verbose-payload","title":"Verbose + payload","text":"<pre><code>sudo snort -vd\n</code></pre>"},{"location":"tech%20briefs/network/snort/#verbose-payload-link-layer","title":"Verbose + payload + link-layer","text":"<pre><code>sudo snort -vde\n</code></pre>"},{"location":"tech%20briefs/network/snort/#full-packet-dump","title":"Full packet dump","text":"<pre><code>sudo snort -X\n</code></pre>"},{"location":"tech%20briefs/network/snort/#2-logger-mode-save-traffic","title":"2) Logger Mode (save traffic)","text":"<p>Snort can log packets for later analysis.</p>"},{"location":"tech%20briefs/network/snort/#parameters_1","title":"Parameters","text":"Parameter Description -l DIR Log directory (default: /var/log/snort) -K ASCII Log packets in ASCII format -r FILE Read binary log file -n NUM Limit number of packets processed"},{"location":"tech%20briefs/network/snort/#examples_1","title":"Examples","text":""},{"location":"tech%20briefs/network/snort/#log-in-current-directory","title":"Log in current directory","text":"<pre><code>sudo snort -dev -l .\n</code></pre>"},{"location":"tech%20briefs/network/snort/#log-in-ascii-format","title":"Log in ASCII format","text":"<pre><code>sudo snort -dev -K ASCII -l .\n</code></pre>"},{"location":"tech%20briefs/network/snort/#read-a-log-file","title":"Read a log file","text":"<pre><code>sudo snort -r snort.log -X\n</code></pre>"},{"location":"tech%20briefs/network/snort/#read-log-with-bpf-filter","title":"Read log with BPF filter","text":"<pre><code>sudo snort -r snort.log icmp\nsudo snort -r snort.log tcp\nsudo snort -r snort.log 'udp and port 53'\n</code></pre>"},{"location":"tech%20briefs/network/snort/#read-only-10-packets","title":"Read only 10 packets","text":"<pre><code>sudo snort -dvr snort.log -n 10\n</code></pre>"},{"location":"tech%20briefs/network/snort/#ownership-note","title":"Ownership Note","text":"<p>Logs created as root \u2192 need sudo or change ownership: <pre><code>sudo chown $USER:$USER snort.log\n</code></pre></p>"},{"location":"tech%20briefs/network/snort/#3-idsips-mode-rule-based-detection","title":"3) IDS/IPS Mode (rule-based detection)","text":"<p>Run Snort with rules from your config.</p>"},{"location":"tech%20briefs/network/snort/#parameters_2","title":"Parameters","text":"Parameter Description -c FILE Config file (required) -T Test configuration -N Disable logging -D Daemon mode -A MODE Alert mode: console, cmg, fast, full, none"},{"location":"tech%20briefs/network/snort/#alert-modes","title":"Alert Modes","text":"Mode Description console Fast-style alerts in console cmg Header + payload (hex/text) in console fast Minimal alert in log only full Detailed alert in log only none Disable alerts (still logs traffic)"},{"location":"tech%20briefs/network/snort/#examples_2","title":"Examples","text":""},{"location":"tech%20briefs/network/snort/#test-config","title":"Test config","text":"<pre><code>sudo snort -c /etc/snort/snort.conf -T\n</code></pre>"},{"location":"tech%20briefs/network/snort/#run-with-console-alerts","title":"Run with console alerts","text":"<pre><code>sudo snort -c /etc/snort/snort.conf -A console\n</code></pre>"},{"location":"tech%20briefs/network/snort/#idsips-mode-with-parameter-a-cmg","title":"IDS/IPS\u00a0mode with parameter \"-A cmg\"","text":"<p>Cmg mode provides basic header details with payload in hex and text format. <pre><code>sudo snort -c /etc/snort/snort.conf -A cmg\n</code></pre></p>"},{"location":"tech%20briefs/network/snort/#idsips-mode-with-parameter-a-fast","title":"IDS/IPS\u00a0mode with parameter \"-A fast\"","text":"<p>Fast mode provides alert messages, timestamps, and source and destination IP addresses.\u00a0Remember, there is no console output in this mode. <pre><code>sudo snort -c /etc/snort/snort.conf -A fast\n</code></pre></p>"},{"location":"tech%20briefs/network/snort/#idsips-mode-with-parameter-a-full","title":"IDS/IPS\u00a0mode with parameter \"-A full\"","text":"<p>Full alert mode provides all possible information about the alert.\u00a0Remember, there is no console output in this mode. <pre><code>sudo snort -c /etc/snort/snort.conf -A full\n</code></pre></p>"},{"location":"tech%20briefs/network/snort/#idsips-mode-with-parameter-a-none","title":"IDS/IPS\u00a0mode with parameter \"-A none\"","text":"<p>Disable alerting. This\u00a0mode doesn't create the alert file. However, it still logs the traffic and creates a log file in binary dump format.\u00a0Remember, there is no console output in this mode. <pre><code>sudo snort -c /etc/snort/snort.conf -A none\n</code></pre></p>"},{"location":"tech%20briefs/network/snort/#disable-logging","title":"Disable logging","text":"<pre><code>sudo snort -c /etc/snort/snort.conf -N\n</code></pre>"},{"location":"tech%20briefs/network/snort/#background-mode","title":"Background mode","text":"<pre><code>sudo snort -c /etc/snort/snort.conf -D\n</code></pre>"},{"location":"tech%20briefs/network/snort/#ips-mode-and-dropping-packets","title":"IPS\u00a0mode and dropping packets","text":"<p>Snort\u00a0IPS\u00a0mode activated with\u00a0-Q --daq\u00a0afpacket\u00a0parameters. You can also activate this mode by editing snort.conf file. However, you don't need to edit snort.conf file in the scope of this room. Review the bonus task or snort manual for further information on\u00a0daq\u00a0and advanced configuration settings:\u00a0<code>-Q --daq afpacket</code> Activate the Data Acquisition (DAQ) modules and use the afpacket module to use snort as an\u00a0IPS:\u00a0<code>-i eth0:eth1</code> Identifying interfaces note that Snort\u00a0IPS\u00a0require at least two interfaces to work.\u00a0Now run the\u00a0traffic-generator script\u00a0as sudo\u00a0and\u00a0start\u00a0ICMP/HTTP\u00a0traffic. <pre><code>sudo snort -c /etc/snort/snort.conf -q -Q --daq afpacket -i eth0:eth1 -A console\n</code></pre></p>"},{"location":"tech%20briefs/network/snort/#4-pcap-mode-offline-analysis","title":"4) PCAP Mode (offline analysis)","text":"<p>Analyze pcap files for alerts and stats.</p>"},{"location":"tech%20briefs/network/snort/#parameters_3","title":"Parameters","text":"Parameter Description -r FILE Read a single pcap --pcap-list=\"a b c\" Process multiple pcaps --pcap-show Show pcap name while processing"},{"location":"tech%20briefs/network/snort/#examples_3","title":"Examples","text":""},{"location":"tech%20briefs/network/snort/#basic-read","title":"Basic read","text":"<pre><code>python snort -r sample.pcap\n</code></pre>"},{"location":"tech%20briefs/network/snort/#read-with-config-and-alerts","title":"Read with config and alerts","text":"<pre><code>sudo snort -c /etc/snort/snort.conf -q -r icmp.pcap -A console -n 10\n</code></pre>"},{"location":"tech%20briefs/network/snort/#multiple-pcaps","title":"Multiple pcaps","text":"<pre><code>sudo snort -c /etc/snort/snort.conf --pcap-list=\"icmp.pcap http.pcap\" -A console\n</code></pre>"},{"location":"tech%20briefs/network/snort/#show-pcap-names","title":"Show pcap names","text":"<pre><code>sudo snort -c /etc/snort/snort.conf --pcap-list=\"icmp.pcap http.pcap\" -A console --pcap-show\n</code></pre>"},{"location":"tech%20briefs/network/snort/#5-rule-basics","title":"5) Rule Basics","text":"<pre><code>Snort rules = **action + protocol + src/dst IP + ports + direction + options**.\n</code></pre>"},{"location":"tech%20briefs/network/snort/#common-actions","title":"Common Actions","text":"Action Description alert Generate alert and log packet log Log packet only drop Drop packet + log (IPS mode required) reject Drop + log + send TCP RST/ICMP unreachable"},{"location":"tech%20briefs/network/snort/#direction","title":"Direction","text":"Symbol Meaning -&gt; Source \u2192 Destination &lt;&gt; Bidirectional"},{"location":"tech%20briefs/network/snort/#examples_4","title":"Examples","text":""},{"location":"tech%20briefs/network/snort/#simple-icmp-alert","title":"Simple ICMP alert","text":"<pre><code>alert icmp any any &lt;&gt; any any (msg:\"ICMP Packet Found\"; sid:100001; rev:1;)\n</code></pre>"},{"location":"tech%20briefs/network/snort/#ip-range","title":"IP range","text":"<pre><code>alert icmp 192.168.1.0/24 any &lt;&gt; any any (msg:\"ICMP from subnet\"; sid:100002; rev:1;)\n</code></pre>"},{"location":"tech%20briefs/network/snort/#port-filter","title":"Port filter","text":"<pre><code>alert tcp any any -&gt; any 21 (msg:\"FTP traffic\"; sid:100003; rev:1;)\n</code></pre>"},{"location":"tech%20briefs/network/snort/#negation","title":"Negation","text":"<pre><code>alert tcp any any -&gt; any !21 (msg:\"Non-FTP traffic\"; sid:100004; rev:1;)\n</code></pre> <p>TIP: Add your rules to <code>/etc/snort/rules/local.rules</code>.</p>"},{"location":"tech%20briefs/network/snort/#examples-rules-that-i-create-for-ctf-room","title":"Examples rules that i create for ctf room","text":"<p>Write a rule to detect all TCP packets\u00a0from or to\u00a0port 80. <pre><code>alert tcp any 80 &lt;&gt; any any (msg:\u201dTCP port 80 found\u201d; sid:100001; rev:1;)\n</code></pre></p> <p>Write a\u00a0single\u00a0rule to detect \"all TCP port 21\"\u00a0 traffic in the given pcap. <pre><code>alert tcp any 21 &lt;&gt; any any (msg:\"src:FTP found\"; sid:100001; rev:1;)\n</code></pre></p> <p>What is the FTP service name? <pre><code>sudo snort -r snort.log.1671731339 -X -n 10 // read 10 packets \n</code></pre></p> <p>Write a rule to detect failed FTP login attempts in the given pcap. <pre><code>alert tcp any 21 &lt;&gt; any any (msg:\"Detectected Failed FTP Login\"; content:\"530 User\"; sid:100003; rev:1;)\n</code></pre> List of ftp responding codes here -&gt; </p> <p>Write a rule to detect successful FTP logins in the given pcap. <pre><code>alert tcp any 21 &lt;&gt; any any (msg:\"Detected Successful FTP Login\"; content:\"230 User\"; sid:100004;\n</code></pre></p> <p>Write a rule to detect\u00a0FTP\u00a0login attempts with a valid username\u00a0but no password entered yet. <pre><code>alert tcp any 21 &lt;&gt; any any (msg:\"FTP Failed Login-Bad or No Password\"; content:\"331 Password\"; sid:100005; rev:1;)\n</code></pre></p> <p>Write a rule to detect\u00a0FTP\u00a0login attempts with the \"Administrator\" username but no password entered yet. <pre><code>alert tcp any 21 &lt;&gt; any any (msg:\"FTP Failed Admin Login-Bad or No Password\"; content:\"331 Password\"; fast_pattern; content:\"Administrator\"; sid:100006; rev:1;)\n</code></pre></p> <p>Write a rule to detect the PNG file in the given pcap. <pre><code>alert tcp any any &lt;&gt; any any (msg:\"PNG file Detected\"; content:\"|89 50 4A 47 0D 0A 1A 0A|\"; sid:100002; rev:1;)\n</code></pre> the || is to show a number in hex format.. every file type has a hex signature in the start of it!</p> <p>Write a rule to detect the GIF file in the given pcap. <pre><code>alert tcp any any &lt;&gt; any any (msg:\"GIF File Detected\"; content:\"|47 49 46 38 39|\"; sid:100003; rev:1;)\n</code></pre> </p> <p>lets create\u00a0IDS\u00a0Rules for torrent metafiles in the traffic!</p> <p>Write a rule to detect the torrent metafile in the given pcap. <pre><code>alert tcp any any &lt;&gt; any any (msg: \"Torrent\"; content:\"torrent\"; sid: 10000001; rev:1;)\n</code></pre></p> <p>Write a rule to detect packet payloads\u00a0between 770 and 855 bytes. <pre><code>alert tcp any any -&gt; any any (msg:\"Tcp connections\"; dsize:770&lt;&gt;855;  sid: 100001; rev:1;)\n</code></pre></p>"},{"location":"tech%20briefs/network/snort/#wrong-syntax-rules","title":"wrong syntax rules","text":"<ul> <li> <p>1 syntax error <pre><code>alert tcp any 3372 -&gt; any any(msg: \"Troubleshooting 1\"; sid:1000001; rev:1;)\n</code></pre>  [Syntax] Missing required space before options block: should be \"... any any (msg: ...)\"</p> </li> <li> <p>1 syntax error  <pre><code>alert icmp any -&gt; any any (msg: \"Troubleshooting 2\"; sid:1000001; rev:1;)\n</code></pre>  [Syntax] ICMP rules do not use ports; remove the trailing destination port \"any\".</p> </li> <li> <p>1 syntax error <pre><code>alert icmp any any -&gt; any any (msg: \"ICMP Packet Found\"; sid:1000001; rev:1;)\nalert tcp any any -&gt; any 80,443 (msg: \"HTTPX Packet Found\"; sid:1000001; rev:1;)\n</code></pre>  [Syntax] ICMP rule incorrectly includes ports (\"any any\"); ICMP has no ports.</p> </li> <li> <p>2 syntax errors  <pre><code>alert icmp any any -&gt; any any (msg: \"ICMP Packet Found\"; sid:1000001; rev:1;)\nalert tcp any 80,443 -&gt; any any (msg: \"HTTPX Packet Found\": sid:1000001; rev:1;)\n</code></pre>  [Syntax 1] ICMP rule includes ports; ICMP has no ports.  [Syntax 2] Extra colon after msg string: use ... msg:\"HTTPX Packet Found\"; sid:...</p> </li> <li> <p>2 syntax errors  <pre><code>alert icmp any any &lt;&gt; any any (msg: \"ICMP Packet Found\"; sid:1000001; rev:1;)\nalert icmp any any &lt;- any any (msg: \"Inbound ICMP Packet Found\"; sid;1000002; rev:1;)\n</code></pre> alert tcp any any -&gt; any 80,443 (msg: \"HTTPX Packet Found\": sid:1000003; rev:1;)  [Syntax 1] Invalid direction operator \"&lt;-\"; valid are \"-&gt;\" or \"&lt;&gt;\".  [Syntax 2] Wrong separator in option: \"sid;1000002\" must be \"sid:1000002\".</p> </li> <li> <p>logic error (case sensitive; add <code>nocase;</code>)  <pre><code>alert tcp any any &lt;&gt; any 80  (msg: \"GET Request Found\"; content:\"|67 65 74|\"; sid: 100001; rev:1;)\n</code></pre> [Logic] Content bytes 67 65 74 = \"get\" (lowercase). HTTP methods are typically uppercase. Add \"nocase;\" (or match ASCII \"GET \") to avoid missing true positives.</p> </li> <li> <p>logic error (no msg; rule runs but not useful)  <pre><code>alert tcp any any &lt;&gt; any 80  (content:\"|2E 68 74 6D 6C|\"; sid: 100001; rev:1;)\n</code></pre>  [Logic] Missing \"msg\" option; alerts will have empty/unnamed message, reducing usefulness.</p> </li> </ul>"},{"location":"tech%20briefs/network/snort/#manual-pdf-snort-from-tryhackme","title":"Manual PDF (Snort from tryhackme)","text":""},{"location":"tech%20briefs/network/zeek/","title":"Introduction To Network Monitoring Approaches","text":"<p>Network monitoring is the continuous observation and optional retention of network traffic for later analysis. Objectives include detecting and reducing network problems, improving performance, and supporting productivity. It is a staple of daily IT operations and differs from Network Security Monitoring (NSM) in purpose and scope.</p>"},{"location":"tech%20briefs/network/zeek/#network-monitoring","title":"Network Monitoring","text":"<p>Focus on uptime/availability, device health, connection quality (latency, loss, jitter), and traffic balance/configuration. Activities include traffic visualization, troubleshooting, and root-cause analysis. This model primarily serves network administrators and usually does not cover deep, non-asset vulnerabilities or advanced security concerns such as insider threats and zero-day exploitation. Typically it sits outside a SOC and belongs to enterprise IT/network management.</p>"},{"location":"tech%20briefs/network/zeek/#network-security-monitoring","title":"Network Security Monitoring","text":"<p>Focus on anomalies and threat activity: rogue hosts, suspicious encrypted flows, odd services/ports, and malicious/suspicious traffic patterns. Traffic visualization and investigation of suspicious events are core. It is used by security analysts, incident responders, security engineers, and threat hunters. It relies on rules/signatures/behavioral patterns and operates in the SOC with tiered roles (Tier 1\u20132\u20133).</p>"},{"location":"tech%20briefs/network/zeek/#zeek-overview","title":"Zeek Overview","text":"<p>Zeek (formerly Bro) is a passive traffic analysis framework originating from Lawrence Berkeley National Lab. It is both open-source (community maintained) and commercial (Corelight enterprise distribution). Zeek stands out by producing a broad set of detailed, structured logs usable for forensics and analytics, more than fifty log types across multiple categories.</p> <p></p>"},{"location":"tech%20briefs/network/zeek/#zeek-vs-snort","title":"Zeek Vs Snort","text":"<p>While both are IDS/NIDS, each excels at different goals. Zeek emphasizes broad NSM analytics and event correlation; Snort emphasizes signature-driven detection/prevention.</p> Tool Capabilities Cons Pros Common Use Case Zeek NSM + IDS framework, heavy focus on network analysis and event semantics Harder to use; much analysis occurs outside the core unless scripted/automated In-depth visibility; strong for threat hunting; complex, chained threat detection; scripting + correlation Network monitoring; deep traffic investigation; chained-event intrusion detection Snort IDS/IPS focused on signatures and packet-level patterns Weaker at complex multi-stage behaviors Easy-to-read logs; easy rule authoring; large community; vendor-backed (e.g., Cisco rules) Intrusion detection &amp; prevention; stopping known attacks"},{"location":"tech%20briefs/network/zeek/#architecture","title":"Architecture","text":"<p>Two primary layers: - Event Engine: Packet processing/core event description. Identifies src/dst, protocols, sessions, and extracts files. - Policy Script Interpreter: Semantic/correlation layer that applies Zeek scripts to derive meaning, create notices, and orchestrate responses.</p>"},{"location":"tech%20briefs/network/zeek/#frameworks-selected","title":"Frameworks (Selected)","text":"<p>Logging, Notice, Input, Configuration, Intelligence, Cluster, Broker Communication, Supervisor, GeoLocation, File Analysis, Signature, Summary, NetControl, Packet Analysis, TLS Decryption. These extend Zeek in the scripting layer and are typically enabled with <code>@load ...</code>.</p>"},{"location":"tech%20briefs/network/zeek/#outputs-logs-and-default-paths","title":"Outputs (Logs) And Default Paths","text":"<p>Zeek emits tab-separated ASCII logs; each session has a unique UID for correlation. By default when running as a service, logs live under: - /opt/zeek/logs/</p>"},{"location":"tech%20briefs/network/zeek/#log-categories-examples","title":"Log Categories (Examples)","text":"Category Description Example Logs Network Protocols Protocol-level activity conn.log, dce_rpc.log, dhcp.log, dnp3.log, dns.log, ftp.log, http.log, irc.log, kerberos.log, modbus*.log, mysql.log, ntlm.log, ntp.log, radius.log, rdp.log, rfb.log, sip.log, smb_cmd.log, smb_files.log, smb_mapping.log, smtp.log, snmp.log, socks.log, ssh.log, ssl.log, syslog.log, tunnel.log Files File analysis results files.log, ocsp.log, pe.log, x509.log NetControl Network control &amp; flow actions netcontrol.log, netcontrol_drop.log, netcontrol_shunt.log, netcontrol_catch_release.log, openflow.log Detection Detections/indicators intel.log, notice.log, notice_alarm.log, signatures.log, traceroute.log Observations Environment summaries known_certs.log, known_hosts.log, known_modbus.log, known_services.log, software.log Miscellaneous External alerts/inputs/failures barnyard2.log, dpd.log, unified2.log, unknown_protocols.log, weird.log, weird_stats.log Diagnostics System and script diagnostics broker.log, capture_loss.log, cluster.log, config.log, loaded_scripts.log, packet_filter.log, print.log, prof.log, reporter.log, stats.log, stderr.log, stdout.log"},{"location":"tech%20briefs/network/zeek/#update-cadence-typical","title":"Update Cadence (Typical)","text":"Frequency Log Name Description Daily known_hosts.log Hosts that completed TCP handshakes Daily known_services.log Services observed Daily known_certs.log Observed TLS certificates Daily software.log Software fingerprints seen on the network Per session notice.log Anomalies detected Per session intel.log Traffic matched to indicators Per session signatures.log Matched signatures"},{"location":"tech%20briefs/network/zeek/#investigation-blueprint-log-usage-primer","title":"Investigation Blueprint (Log Usage Primer)","text":"<p>Overall info: conn.log, files.log, loaded_scripts.log, intel.log Protocol deep dive: http.log, dns.log, ftp.log, ssh.log Detection: notice.log, signatures.log, pe.log, traceroute.log Observations: known_hosts.log, known_services.log, software.log, weird.log</p>"},{"location":"tech%20briefs/network/zeek/#operating-modes","title":"Operating Modes","text":"<ul> <li>Service/Live: Continuous interface monitoring via Zeek + ZeekControl.</li> <li>Offline/Pcap: Process captures and produce the same logs.</li> </ul>"},{"location":"tech%20briefs/network/zeek/#core-command-line-parameters","title":"Core Command-Line Parameters","text":"Parameter Description -r Read/process a pcap file -C Ignore checksum errors -v Print version info zeekctl ZeekControl module (service management)"},{"location":"tech%20briefs/network/zeek/#working-with-zeek-examples","title":"Working With Zeek (Examples)","text":"<p>Check version: <pre><code>zeek -v\n</code></pre> Manage service (requires privileges): <pre><code>zeekctl\nzeekctl status\nzeekctl start\nzeekctl stop\n</code></pre></p> <p>Process a pcap (ignore checksum): <pre><code>zeek -C -r sample.pcap\n</code></pre></p> <p>Locate logs: <pre><code>ls -l\nls -l /opt/zeek/logs/\n</code></pre></p>"},{"location":"tech%20briefs/network/zeek/#zeekcontrol-session-illustrative","title":"ZeekControl Session (Illustrative)","text":"<pre><code>root@ubuntu$ zeekctl\nWelcome to ZeekControl 2.X.0\n[ZeekControl] &gt; status\nName         Type       Host          Status    Pid    Started\nzeek         standalone localhost     stopped\n[ZeekControl] &gt; start\nstarting zeek ...\n[ZeekControl] &gt; status\nName         Type       Host          Status    Pid    Started\nzeek         standalone localhost     running   2541   13 Mar 18:25:08\n[ZeekControl] &gt; stop\nstopping zeek ...\n[ZeekControl] &gt; status\nName         Type       Host          Status    Pid    Started\nzeek         standalone localhost     stopped\n</code></pre>"},{"location":"tech%20briefs/network/zeek/#cli-kung-fu-unix-text-processing","title":"CLI Kung-Fu (Unix Text Processing)","text":"Category Command / Pattern Purpose Basics history; !!; !10 Recall/execute prior commands Read cat file; head file; tail file View files Find grep 'pattern' file Filter lines Cut cut -f 1; cut -d '.' -f 1-2 Select fields / subfields Sort sort; sort -n; sort -nr Sort alphanumerically/numerically Unique uniq; uniq -c De-duplicate / count duplicates Counts wc -l Count lines Numbering nl file Number lines Sed sed -n '10,15p' file; sed -n '11p' file Print ranges/specific line Awk awk 'NR &lt; 11 {print $0}' file; awk 'NR==11{print $0}' Select by row number Special zeek-cut Extract named fields from Zeek logs <p>Extract fields from conn.log: <pre><code>cat conn.log | zeek-cut uid proto id.orig_h id.orig_p id.resp_h id.resp_p\n</code></pre></p>"},{"location":"tech%20briefs/network/zeek/#zeek-cut-demo-concept","title":"Zeek-Cut Demo (Concept)","text":"<pre><code>fields ts uid id.orig_h id.orig_p id.resp_h id.resp_p proto service ...\n1488571051.943250 CTMFXm1AcIsSnq2Ric 192.168.121.2 51153 192.168.120.22 53 udp dns ...\n1488571038.380901 CLsSsA3HLB2N6uJwW   192.168.121.10 50080 192.168.120.10 514 udp -  ...\ncat conn.log | zeek-cut uid proto id.orig_h id.orig_p id.resp_h id.resp_p\nCTMFXm1AcIsSnq2Ric udp 192.168.121.2  51153 192.168.120.22 53\nCLsSsA3HLB2N6uJwW   udp 192.168.121.10 50080 192.168.120.10 514\n</code></pre>"},{"location":"tech%20briefs/network/zeek/#signatures-structure-and-usage","title":"Signatures (Structure And Usage)","text":"<p>Zeek signatures combine: signature id, conditions, action.</p> Component Details Header src-ip, dst-ip, src-port, dst-port, ip-proto (TCP/UDP/ICMP/ICMP6/IP/IP6) Content Payload regex; decoded HTTP request/headers/body; reply headers/body; FTP command stream Context same-ip checks and other contextual filters Operators ==, !=, &lt;, &lt;=, &gt;, &gt;= (strings, numbers, regex) Action Default: write to signatures.log; optional: trigger events/scripts for correlation <p>Run Zeek with signature file (.sig): <pre><code>zeek -C -r sample.pcap -s sample.sig\n</code></pre></p> <p>Example: HTTP Cleartext Password <pre><code>signature http-password {\n  ip-proto == tcp\n  dst-port == 80\n  payload /.*password.*/\n  event \"Cleartext Password Found!\"\n}\n</code></pre></p> <p>Execute &amp; inspect: <pre><code>zeek -C -r http.pcap -s http-password.sig\ncat notice.log     | zeek-cut id.orig_h id.resp_h msg\ncat signatures.log | zeek-cut src_addr dest_addr sig_id event_msg\ncat signatures.log | zeek-cut sub_msg\n</code></pre></p> <p>Example outputs (illustrative): <pre><code>10.10.57.178 44.228.249.3 10.10.57.178: Cleartext Password Found!\nPOST /userinfo.php HTTP/1.1... Host: testphp.vulnweb.com ...\n</code></pre></p> <p>Example: FTP Admin Attempt <pre><code>signature ftp-admin {\n  ip-proto == tcp\n  ftp /.*USER.*dmin.*/\n  event \"FTP Admin Login Attempt!\"\n}\n</code></pre></p> <p>Example: FTP Brute-Force Via Response Code <pre><code>signature ftp-brute {\n  ip-proto == tcp\n  payload /.*530.*Login.*incorrect.*/\n  event \"FTP Brute-force Attempt!\"\n}\n</code></pre></p> <p>Grouped signatures in one file (username + brute): <pre><code>signature ftp-username { ip-proto == tcp ftp /.*USER.*/ event \"FTP Username Input Found!\" }\nsignature ftp-brute    { ip-proto == tcp payload /.*530.*Login.*incorrect.*/ event \"FTP Brute-force Attempt!\" }\n</code></pre></p>"},{"location":"tech%20briefs/network/zeek/#scripting-101-201","title":"Scripting (101 \u2192 201)","text":"<p>Zeek scripts are event-driven and as expressive as high-level languages. Base scripts live under /opt/zeek/share/zeek/base (do not modify). Site/local scripts under /opt/zeek/share/zeek/site. Policy scripts under /opt/zeek/share/zeek/policy. Configuration at /opt/zeek/share/zeek/site/local.zeek. Scripts use the .zeek extension. Zeek is event-oriented (not packet-oriented).</p> <p>Load scripts in live mode via local.zeek (load @/path or load @name), or run a script for a single offline analysis.</p> <p>Events: <pre><code>zeek_init()       # Fires at start\nzeek_done()       # Fires at end\nnew_connection(c) # Per new connection\nsignature_match(state,msg,data) # Signature hit\n</code></pre></p> <p>Examples: <pre><code>event zeek_init() { print(\"Started Zeek!\"); }\nevent zeek_done() { print(\"Stopped Zeek!\"); }\n</code></pre></p> <p>Run: <pre><code>zeek -C -r sample.pcap 101.zeek\n</code></pre></p> <p>Dump raw connection structure: <pre><code>event new_connection(c: connection) { print c; }\n</code></pre></p> <p>Selective pretty print: <pre><code>event new_connection(c: connection) {\n  print \"###########################################################\";\n  print \"New Connection Found!\";\n  print fmt(\"Source Host: %s # %s ---&gt;\", c$id$orig_h, c$id$orig_p);\n  print fmt(\"Destination Host: %s # %s &lt;---\", c$id$resp_h, c$id$resp_p);\n}\n</code></pre></p> <p>Script + signature correlation: <pre><code>event signature_match (state: signature_state, msg: string, data: string) {\n  if (state$sig_id == \"ftp-admin\") { print (\"Signature hit! --&gt; #FTP-Admin\"); }\n}\n</code></pre></p>"},{"location":"tech%20briefs/network/zeek/#loading-built-ins-frameworks","title":"Loading Built-Ins / Frameworks","text":"<p>Load all site-configured scripts (local): <pre><code>zeek -C -r ftp.pcap local\n</code></pre></p>"},{"location":"tech%20briefs/network/zeek/#new-logs-may-appear-loaded_scriptslog-capture_losslog-noticelog-statslog","title":"New logs may appear: loaded_scripts.log, capture_loss.log, notice.log, stats.log","text":"<p>Load a specific policy script: <pre><code>zeek -C -r ftp.pcap /opt/zeek/share/zeek/policy/protocols/ftp/detect-bruteforcing.zeek\ncat notice.log | zeek-cut ts note msg\n... FTP::Bruteforcing ... had 20 failed logins on 1 FTP server in 0m1s\n</code></pre></p>"},{"location":"tech%20briefs/network/zeek/#file-analysis-framework-hashing-extraction","title":"File Analysis Framework (Hashing + Extraction)","text":"<p>Hash all observed files: <pre><code>@load /opt/zeek/share/zeek/policy/frameworks/files/hash-all-files.zeek\n</code></pre> Run: <pre><code>zeek -C -r case1.pcap /opt/zeek/share/zeek/policy/frameworks/files/hash-all-files.zeek\n</code></pre> View: <pre><code>cat files.log | zeek-cut md5 sha1 sha256\n</code></pre></p> <p>Extract all files: <pre><code>zeek -C -r case1.pcap /opt/zeek/share/zeek/policy/frameworks/files/extract-all-files.zeek\nls extract_files\nfile extract_files/*\n</code></pre></p> <p>Correlate files with connections: <pre><code>cat files.log | zeek-cut fuid conn_uids tx_hosts rx_hosts mime_type extracted\n</code></pre></p>"},{"location":"tech%20briefs/network/zeek/#pivot-on-conn_uids-into-connloghttplog-to-get-context-server-uri-ua","title":"Pivot on conn_uids into conn.log/http.log to get context (server, URI, UA)","text":""},{"location":"tech%20briefs/network/zeek/#intelligence-framework-indicator-matching","title":"Intelligence Framework (Indicator Matching)","text":"<p>Intel file (tab-delimited): /opt/zeek/intel/zeek_intel.txt <pre><code>#fields    indicator    indicator_type    meta.source    meta.desc\nsmart-fax.com  Intel::DOMAIN  zeek-intel-test  Zeek-Intelligence-Framework-Test\n</code></pre></p> <p>Script: <pre><code>@load policy/frameworks/intel/seen\n@load policy/frameworks/intel/do_notice\nredef Intel::read_files += { \"/opt/zeek/intel/zeek_intel.txt\" };\n</code></pre></p> <p>Run: <pre><code>zeek -C -r case1.pcap intelligence-demo.zeek\nInspect:\ncat intel.log | zeek-cut uid id.orig_h id.resp_h seen.indicator matched\n</code></pre></p>"},{"location":"tech%20briefs/network/zeek/#package-manager-zkg","title":"Package Manager (ZKG)","text":"Command Description zkg install  Install a package zkg list List installed packages zkg remove  Remove a package zkg refresh Refresh package metadata zkg upgrade Update installed packages <p>Install cleartext password detector: <pre><code>zkg install zeek/cybera/zeek-sniffpass\n</code></pre></p> <p>Run: <pre><code>zeek -Cr http.pcap zeek-sniffpass\n</code></pre></p> <p>Check: <pre><code>cat notice.log | zeek-cut id.orig_h id.resp_h proto note msg\n\n =&gt; SNIFFPASS::HTTP_POST_Password_Seen ... Password found for user ...\n</code></pre></p> <p>Geolocation enrichment (depends on local GeoLite DB):  - (e.g., geoip-conn) <pre><code>zeek -Cr case1.pcap geoip-conn\ncat conn.log | zeek-cut uid id.orig_h id.resp_h geo.orig.country_code geo.orig.region geo.orig.city geo.resp.country_code geo.resp.region geo.resp.city\n</code></pre></p>"},{"location":"tech%20briefs/network/zeek/#directories-dodont","title":"Directories &amp; Do/Don't","text":"<pre><code>Do not modify: /opt/zeek/share/zeek/base\nPolicy scripts: /opt/zeek/share/zeek/policy\nSite/local scripts: /opt/zeek/share/zeek/site\nConfig: /opt/zeek/share/zeek/site/local.zeek\nBIFs/protocols: /opt/zeek/share/zeek/base/bif, /opt/zeek/share/zeek/base/protocols\n</code></pre>"},{"location":"tech%20briefs/network/zeek/#notes-on-snort-rule-compatibility","title":"Notes On Snort Rule Compatibility","text":"<p>Legacy Snort-to-Bro (snort2bro) is no longer supported in modern Zeek distributions; workflows diverged after rebranding.</p>"},{"location":"tech%20briefs/network/zeek/#end-to-end-investigation-example-conceptual","title":"End-To-End Investigation Example (Conceptual)","text":"<ul> <li>Start broad: conn.log + files.log + intel.log; scan for outliers (rare ports, large transfers, new software).</li> <li>Pivot by UID to dns/http/ssl/ssh/ftp to extract URLs, JA3/TLS certs, user-agents, credential patterns.</li> <li>Inspect detection outputs: notice.log, signatures.log for corroborating signals.</li> <li>Correlate extracted files (files.log, pe.log, x509.log) back to servers and sessions; hash, detonate, or block.</li> <li>Summarize with known_hosts/services/software to see whether behavior is new or expected baseline.</li> <li>Refine signatures/scripts or enable frameworks to improve recall/precision; feed indicators back into intel.</li> </ul>"},{"location":"tech%20briefs/network/zeek/#quick-reference-parameter-path-table","title":"Quick Reference \u2013 Parameter &amp; Path Table","text":"Item Value / Example Default logs dir /opt/zeek/logs/ Run pcap zeek -C -r sample.pcap Service control zeekctl start stop status Version zeek -v Load local zeek -C -r pc.pcap local Load script zeek -C -r pc.pcap /opt/zeek/share/zeek/policy/... With signatures zeek -C -r pc.pcap -s rules.sig"},{"location":"tech%20briefs/network/zeek/#conclusion","title":"Conclusion","text":"<p>Zeek is more than an IDS: It is a comprehensive network telemetry and analysis platform. By combining structured logs, signatures, an event-driven scripting language, and modular frameworks/packages, it enables deep visibility, correlation, and forensic power. In SOC operations Zeek complements signature-centric tools like Snort by adding context and multi-stage behavior detection, supporting both rapid triage and in-depth investigations.</p>"},{"location":"tech%20briefs/website/javascript-var-let-const/","title":"Var, Let, Const \u2013 Differences in JavaScript","text":""},{"location":"tech%20briefs/website/javascript-var-let-const/#1-scope","title":"1. Scope","text":"<ul> <li>var \u2192 function-scoped or global-scoped</li> <li>let \u2192 block-scoped (lives only inside <code>{}</code>)    </li> <li>const \u2192 block-scoped</li> </ul> <p>Example: <pre><code>if (true) {\n  var x = 1;   // available outside too\n  let y = 2;   // only inside this block\n  const z = 3; // only inside this block\n}\nconsole.log(x); // 1\nconsole.log(y); // Error\nconsole.log(z); // Error\n</code></pre></p>"},{"location":"tech%20briefs/website/javascript-var-let-const/#2-hoisting","title":"2. Hoisting","text":"<ul> <li>var \u2192 hoisted and initialized as <code>undefined</code></li> <li>let/const \u2192 hoisted but NOT initialized \u2192 Temporal Dead Zone (TDZ)</li> </ul> <p>Example: <pre><code>console.log(a); // undefined\nvar a = 5;\n\nconsole.log(b); // ReferenceError (TDZ)\nlet b = 10;\n\nconsole.log(c); // ReferenceError (TDZ)\nconst c = 15;\n</code></pre></p>"},{"location":"tech%20briefs/website/javascript-var-let-const/#3-redeclaration-reassignment","title":"3. Redeclaration &amp; Reassignment","text":"<ul> <li>var \u2192 can be redeclared and reassigned</li> <li>let \u2192 can be reassigned, but NOT redeclared in the same scope    </li> <li>const \u2192 cannot be reassigned, cannot be redeclared (must be initialized at declaration)</li> </ul> <p>Example: <pre><code>var a = 1;\nvar a = 2;   // ok\na = 3;       // ok\n\nlet b = 1;\nb = 2;       // ok\nlet b = 3;   // Error: redeclaration\n\nconst c = 1;\nc = 2;       // Error: reassignment\nconst c = 3; // Error: redeclaration\n</code></pre></p>"},{"location":"tech%20briefs/website/javascript-var-let-const/#4-objects-and-arrays-with-const","title":"4. Objects and Arrays with Const","text":"<ul> <li><code>const</code> only protects the reference, not the contents.</li> <li>You cannot reassign the whole object/array, but you can change its properties/items.</li> </ul> <p>Example: <pre><code>const obj = { name: \"John\" };\nobj.name = \"Jane\"; // \u2705 allowed\nobj = { age: 30 }; // \u274c Error\n</code></pre></p>"},{"location":"tech%20briefs/website/javascript-var-let-const/#5-loops","title":"5. Loops","text":"<ul> <li>var \u2192 uses the same variable for every iteration (can cause bugs with async code)</li> <li>let \u2192 creates a new variable binding for each iteration</li> </ul> <p>Example: <pre><code>for (var i = 0; i &lt; 3; i++) {\n  setTimeout(() =&gt; console.log(\"var\", i), 100);\n}\n// prints: var 3, var 3, var 3\n\nfor (let j = 0; j &lt; 3; j++) {\n  setTimeout(() =&gt; console.log(\"let\", j), 100);\n}\n// prints: let 0, let 1, let 2\n</code></pre></p>"},{"location":"tech%20briefs/website/javascript-var-let-const/#quick-summary","title":"Quick Summary","text":"<ul> <li>var \u2192 function/global scope, redeclare &amp; reassign, hoisted as <code>undefined</code> </li> <li>let \u2192 block scope, reassign only, TDZ error if used before declaration</li> <li>const \u2192 block scope, no redeclare, no reassign, must initialize</li> </ul>"},{"location":"tech%20briefs/website/sec_headers/","title":"HTTP Security Headers","text":"<p>HTTP Security Headers are fundamental components of modern web application security. They act as additional layers of defense by providing instructions to the browser on how to process and handle content, enforce encryption requirements, and limit the information exchanged with external sites. Unlike traditional server-side configurations, which protect resources at the backend, security headers enforce client-side rules that strengthen resilience against attacks. When properly implemented, they significantly reduce exposure to threats such as Cross-Site Scripting (XSS), clickjacking, MIME-type misinterpretation, and sensitive data leakage [1], [2].</p> <p>These headers are evaluated as part of security assessments, with tools such as securityheaders.io frequently used to determine the configuration status of web applications. Understanding their purpose and correct configuration is essential for any organization that wishes to implement a robust defense-in-depth strategy [2].</p> <p></p>"},{"location":"tech%20briefs/website/sec_headers/#1-content-security-policy-csp","title":"1. Content-Security-Policy (CSP)","text":"<p>The Content-Security-Policy (CSP) header is designed to mitigate client-side attacks, most notably Cross-Site Scripting (XSS), which occurs when an attacker successfully injects malicious scripts into a trusted website. Such attacks can lead to session hijacking, credential theft, or unauthorized actions executed on behalf of users. CSP counters this by providing web administrators with a mechanism to define a strict whitelist of trusted content sources [3].</p> <p>For instance: <code>\\`Content-Security-Policy: default-src 'self'; script-src 'self' https://cdn.example.com; style-src 'self'</code></p> <p>In this configuration:</p> <ul> <li>default-src 'self' specifies that the browser may only load resources from the same origin as the website.</li> <li>script-src defines that JavaScript may be loaded either from the same domain or from a trusted external content delivery network (CDN).    </li> <li>style-src restricts the loading of CSS to the same domain.</li> </ul> <p>By restricting the origin of executable scripts and styles, CSP prevents malicious content hosted on untrusted domains from being executed in the client\u2019s browser. Furthermore, CSP can be configured with additional directives, such as <code>img-src</code> (for images), <code>frame-ancestors</code> (to prevent clickjacking via iframes), and <code>report-uri</code> or <code>report-to</code> (for logging policy violations). This makes CSP one of the most comprehensive browser-enforced protections available today [4].</p>"},{"location":"tech%20briefs/website/sec_headers/#2-strict-transport-security-hsts","title":"2. Strict-Transport-Security (HSTS)","text":"<p>The HTTP Strict-Transport-Security (HSTS) header enforces the use of encrypted HTTPS connections by instructing the browser to reject all future attempts to connect via the insecure HTTP protocol [5]. This prevents downgrade attacks, where an attacker might attempt to force the browser into communicating over HTTP, and mitigates risks such as cookie hijacking during transmission.</p> <p>Example configuration: <code>Strict-Transport-Security: max-age=63072000; includeSubDomains; preload</code></p> <ul> <li>max-age=63072000 indicates that the browser must enforce HTTPS-only connections for two years.</li> <li>includeSubDomains extends this protection to all subdomains, which is crucial since an attacker might otherwise target a weaker subdomain.</li> <li>preload allows the site to be included in browser preload lists, which means the browser will only ever attempt HTTPS connections even before the first visit.</li> </ul> <p>HSTS is a strong defense against protocol downgrade attacks and ensures persistent secure transport. Without HSTS, users could be tricked into insecure connections on hostile networks (e.g., public Wi-Fi). By enabling preload, organizations achieve a proactive enforcement model that virtually eliminates the possibility of accidental or malicious HTTP traffic [6].</p>"},{"location":"tech%20briefs/website/sec_headers/#3-x-content-type-options","title":"3. X-Content-Type-Options","text":"<p>The X-Content-Type-Options header addresses a browser feature called MIME-type sniffing. When this feature is enabled, browsers may try to infer the type of a file based on its content rather than strictly respecting the declared <code>Content-Type</code> header. While this behavior may increase compatibility, it also introduces security risks. Attackers can disguise malicious files, such as JavaScript code, under misleading content types to bypass filters [7].</p> <p>Example configuration: <code>X-Content-Type-Options: nosniff</code></p> <ul> <li>nosniff disables MIME-type sniffing, forcing the browser to strictly enforce the MIME type declared by the server.</li> </ul> <p>This simple directive ensures that files advertised as images, stylesheets, or other benign formats cannot be interpreted as executable code. In practice, this prevents attackers from uploading files with deceptive extensions that could otherwise execute in the browser. Although the header is relatively straightforward, it remains an essential safeguard against content-type confusion attacks [7].</p>"},{"location":"tech%20briefs/website/sec_headers/#4-referrer-policy","title":"4. Referrer-Policy","text":"<p>The Referrer-Policy header determines how much referrer information (the URL of the page that initiated a request) is shared when users navigate between websites. Without explicit control, sensitive details embedded in URLs, such as authentication tokens or session identifiers, could inadvertently be exposed to third parties [8].</p> <p>Different configurations provide varying levels of privacy and utility:</p> <ul> <li>no-referrer: The browser sends no referrer information at all. This offers maximum privacy but may interfere with analytics and referral tracking.</li> <li>same-origin: Referrer information is only sent if the request remains within the same origin. This prevents leakage to external sites but preserves useful internal navigation data.</li> <li>strict-origin: The browser sends only the scheme, host, and port of the origin, but only if the security level remains the same (e.g., HTTPS to HTTPS). This avoids sending full paths while maintaining some referral context.</li> <li>strict-origin-when-cross-origin: For same-origin requests, the full URL is sent, but for cross-origin requests, only minimal information is shared. This represents a balanced option between functionality and security.</li> </ul> <p>By adopting a restrictive Referrer-Policy, organizations ensure that private information embedded in query strings or internal URLs does not leak to external parties, thus enhancing user privacy and protecting internal architecture [9].</p>"},{"location":"tech%20briefs/website/sec_headers/#conclusion","title":"Conclusion","text":"<p>Security headers represent a critical element of modern web security architecture. Each of the headers, CSP, HSTS, X-Content-Type-Options, and Referrer-Policy addresses a distinct attack vector. Collectively, they enforce strict content handling rules, guarantee encrypted transport, prevent content-type misinterpretation, and limit sensitive information exposure. While they cannot replace secure coding practices or rigorous server-side protections, they provide an indispensable browser-level enforcement mechanism that strengthens overall resilience against common attack scenarios [2], [5].</p> <p>Organizations that consistently deploy and audit these headers demonstrate a commitment to best practices in cybersecurity and significantly reduce their vulnerability to both opportunistic and targeted web-based attacks.</p>"},{"location":"tech%20briefs/website/sec_headers/#references","title":"References","text":"<p>[1] OWASP Foundation, OWASP Secure Headers Project, OWASP, 2021. [2] Ivan Risti\u0107, Bulletproof SSL and TLS, Feisty Duck, 2014. [3] M. West, Content Security Policy Level 3, W3C Candidate Recommendation, 2018. [4] D. Akhawe, A. Barth, \u201cTowards a Formal Foundation of Web Security,\u201d IEEE CSF, 2012. [5] J. Hodges, C. Jackson, A. Barth, HTTP Strict Transport Security (HSTS), RFC 6797, IETF, 2012. [6] M. Georgiev et al., \u201cThe Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software,\u201d ACM CCS, 2012. [7] Microsoft, MIME-Handling: X-Content-Type-Options Header, Microsoft Security Documentation, 2010. [8] W3C, Referrer Policy Recommendation, W3C, 2017. [9] A. Barth, C. Jackson, J. C. Mitchell, \u201cRobust Defenses for Cross-Site Request Forgery,\u201d ACM CCS, 2008.</p>"},{"location":"windows/free-spotify/","title":"Tools for Spotify","text":"<p>I\u2019ve tested several great tools that improve the Spotify experience. Some people asked, so I\u2019m sharing them here.</p> <p>Bruh if you haven't used github again then download the latest release from here:  </p>"},{"location":"windows/free-spotify/#ad-free-spotify-desktop","title":"Ad-Free Spotify (Desktop)","text":"<p>If you want to remove ads on your PC (Windows), check out these tools:</p> Tool Description Link SpotX The most popular tool for ad-free Spotify on Windows. SpotX GitHub BlockTheSpot Another way to block ads on desktop. BlockTheSpot GitHub <p></p>"},{"location":"windows/free-spotify/#ad-free-spotify-mobile","title":"Ad-Free Spotify (Mobile)","text":"<p>I don\u2019t personally use ad-free Spotify on mobile, but here are some sources you might find useful:</p> Tool / Source Description Link ReVanced Popular choice for modded apps. revanced.app Mobilism Forum Community for modded APKs. Mobilism Search XManager App for managing Spotify mods. xmanagerapp.com Ad-Silence Open-source tool to mute ads. GitHub Mutify Found on Google Play (not sure if legit yet). Google Play"},{"location":"windows/free-spotify/#other-useful-tools","title":"Other Useful Tools","text":"Tool Description Link Spotivity See what music your friends are listening to. spotivity.me"},{"location":"windows/windows-activation/","title":"How to Activate Windows for Free (My Personal Method)","text":"<p>This is my current method for activating Windows for free. Please note: - This is my personal approach. - There may be easier or more trustworthy methods. - I'm sharing this mainly for friends who ask me.</p>"},{"location":"windows/windows-activation/#step-1-visit-the-activation-website","title":"Step 1 \u2013 Visit the Activation Website","text":"<p>Open your browser and go to: massgrave.dev</p> <p>This site: - Is well-known in the tech community. - Automates the activation process. - Is fully open-source (code is on GitHub). - Works for both Windows and Microsoft Office.</p>"},{"location":"windows/windows-activation/#step-2-open-powershell-as-administrator","title":"Step 2 \u2013 Open PowerShell as Administrator","text":"<ol> <li>Press the Windows key.</li> <li>Type: powershell</li> <li>Right-click \"Windows PowerShell\".</li> <li>Select \"Run as Administrator\". </li> </ol>"},{"location":"windows/windows-activation/#step-3-run-the-activation-command","title":"Step 3 \u2013 Run the Activation Command","text":"<p>PS C:\\Windows\\system32&gt; irm https://get.activated.win | iex</p> <p>Press Enter. </p>"},{"location":"windows/windows-activation/#step-4-choose-an-activation-option","title":"Step 4 \u2013 Choose an Activation Option","text":"<p>When the menu appears: - If you are unsure, press 1 (recommended method). - Wait until the process completes. </p>"},{"location":"windows/windows-activation/#step-5-optional-activate-microsoft-office","title":"Step 5 \u2013 Optional: Activate Microsoft Office","text":"<p>The same menu allows you to activate Office or install it first.  Done.</p> <p>Your Windows (and optionally Office) should now be activated.</p>"}]}